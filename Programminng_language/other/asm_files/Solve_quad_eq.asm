section .data
	fmt_out db "%.3lf", 10, 0
	fmt_in  db "%lf", 0

section .text
	global main
	extern printf
	extern scanf

main:
	PUSH RBP 
	MOV RBP, RSP
	SUB RSP, 0x20
	SUB RSP, 0x40
	LEA RCX, [REL fmt_in]
	LEA RDX, [RBP + 0xfffffff8]
	CALL scanf
	ADD RSP, 0x40
	SUB RSP, 0x40
	LEA RCX, [REL fmt_in]
	LEA RDX, [RBP + 0xfffffff0]
	CALL scanf
	ADD RSP, 0x40
	SUB RSP, 0x40
	LEA RCX, [REL fmt_in]
	LEA RDX, [RBP + 0xffffffe8]
	CALL scanf
	ADD RSP, 0x40
	CALL Check_alignment_odd
	SUB RSP, RBX
	PUSH QWORD [RBP + 0xffffffe8]
	PUSH QWORD [RBP + 0xfffffff0]
	PUSH QWORD [RBP + 0xfffffff8]
	CALL Solve_quad_eq
	ADD RSP, RBX
	ADD RSP, 0x10
	MOVSD [RSP], XMM0
	MOVSD XMM1, [RSP]
	MOV RDX, [RSP]
	SUB RSP, 0x38
	MOV RAX, 0x1
	LEA RCX, [REL fmt_out]
	CALL printf
	ADD RSP, 0x40
	MOV RDX, 0
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET

Solve_quad_eq:
	PUSH RBP 
	MOV RBP, RSP
	SUB RSP, 0x40
	MOV RDX, 0x3eb0c6f7a0b5ed8d
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xfffffff8], XMM0
	PUSH QWORD [RBP + 0x18]
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOV RDX, 0x4010000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0x20]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	SUBSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xfffffff0], XMM0
	PUSH QWORD [RBP + 0xfffffff0]
	MOV RDX, 0
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADD RSP, 0x8
	COMISD XMM1, XMM0
	JB .L0
	JMP .L1
.L0:
	MOV RDX, 0
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
.L1:
	PUSH QWORD [RBP + 0xfffffff0]
	MOVSD XMM1, [RSP]
	SQRTSD XMM1, XMM1
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xffffffe8], XMM0
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM1, [RSP]
	MOV RDX, 0x7fffffffffffffff
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	ANDPD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0xfffffff8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADD RSP, 0x8
	COMISD XMM1, XMM0
	JB .L2
	JMP .L3
.L2:
	CALL Check_alignment_even
	SUB RSP, RBX
	PUSH QWORD [RBP + 0x20]
	PUSH QWORD [RBP + 0x18]
	CALL Solve_lin_eq
	ADD RSP, RBX
	ADD RSP, 0x8
	MOVSD [RSP], XMM0
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
.L3:
	PUSH QWORD [RBP + 0xfffffff0]
	PUSH QWORD [RBP + 0xfffffff8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADD RSP, 0x8
	COMISD XMM1, XMM0
	JB .L4
	JMP .L5
.L4:
	MOV RDX, 0xbff0000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOV RDX, 0x4000000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	DIVSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xffffffe0], XMM0
	PUSH QWORD [RBP + 0xffffffe0]
	MOVSD XMM1, [RSP]
	MOV RDX, [RSP]
	SUB RSP, 0x38
	MOV RAX, 0x1
	LEA RCX, [REL fmt_out]
	CALL printf
	ADD RSP, 0x40
	MOV RDX, 0x3ff0000000000000
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
.L5:
	MOV RDX, 0xbff0000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0xffffffe8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADDSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOV RDX, 0x4000000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	DIVSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xffffffe0], XMM0
	MOV RDX, 0xbff0000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0xffffffe8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	SUBSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOV RDX, 0x4000000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	DIVSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xffffffd8], XMM0
	PUSH QWORD [RBP + 0xffffffe0]
	MOVSD XMM1, [RSP]
	MOV RDX, [RSP]
	SUB RSP, 0x38
	MOV RAX, 0x1
	LEA RCX, [REL fmt_out]
	CALL printf
	ADD RSP, 0x40
	PUSH QWORD [RBP + 0xffffffd8]
	MOVSD XMM1, [RSP]
	MOV RDX, [RSP]
	SUB RSP, 0x38
	MOV RAX, 0x1
	LEA RCX, [REL fmt_out]
	CALL printf
	ADD RSP, 0x40
	MOV RDX, 0x4000000000000000
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET

Solve_lin_eq:
	PUSH RBP 
	MOV RBP, RSP
	SUB RSP, 0x20
	MOV RDX, 0x3eb0c6f7a0b5ed8d
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xfffffff8], XMM0
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM1, [RSP]
	MOV RDX, 0x7fffffffffffffff
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	ANDPD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0xfffffff8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADD RSP, 0x8
	COMISD XMM1, XMM0
	JB .L0
	JMP .L1
.L0:
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM1, [RSP]
	MOV RDX, 0x7fffffffffffffff
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	ANDPD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0xfffffff8]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	ADD RSP, 0x8
	COMISD XMM1, XMM0
	JB .L2
	JMP .L3
.L2:
	MOV RDX, 0x7ff0000000000000
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
	JMP .L4
.L3:
	MOV RDX, 0
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
.L4:
	JMP .L5
.L1:
	MOV RDX, 0xbff0000000000000
	PUSH RDX 
	PUSH QWORD [RBP + 0x18]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	MULSD XMM1, XMM0
	MOVSD [RSP], XMM1
	PUSH QWORD [RBP + 0x10]
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD XMM1, [RSP]
	DIVSD XMM1, XMM0
	MOVSD [RSP], XMM1
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	MOVSD [RBP + 0xfffffff0], XMM0
	PUSH QWORD [RBP + 0xfffffff0]
	MOVSD XMM1, [RSP]
	MOV RDX, [RSP]
	SUB RSP, 0x38
	MOV RAX, 0x1
	LEA RCX, [REL fmt_out]
	CALL printf
	ADD RSP, 0x40
	MOV RDX, 0x3ff0000000000000
	PUSH RDX 
	MOVSD XMM0, [RSP]
	ADD RSP, 0x8
	LEAVE
	RET
.L5:

Check_alignment_even:
	MOV RBX, RSP
	AND RBX, 0xf
	RET

Check_alignment_odd:
	MOV RBX, RSP
	NEG RBX
	AND RBX, 0xf
	RET
